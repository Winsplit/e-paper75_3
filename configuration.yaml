

# e-paper75, no refreshing of the dispaly will be done during the night.
  - binary_sensor:
      - name: "epaper75_update_in_time"
        state: >
          {%if '06.20' < now().strftime('%H.%M') < '23.50' %}
            on
          {% else %}
            off
          {% endif %}

# e-paper75, motion sensor that prevent the screen from updating when someone is close by.
  - binary_sensor:
      - name: epaper_motion_update
        device_class: "occupancy"
        delay_off: 1min
        state: >-
          {%- if states('binary_sensor.ikea_motion_sensor_motion') == 'on' %}
            on
          {%- else -%}
            off
          {%- endif -%}

# e-paper75, Weather forecast.
  - trigger:
      platform: time_pattern
      minutes: "/1"
    sensor:
      - name: epaper75_weather
        state: "OK"
        attributes:
          weather_condition_now: >
            {% set cond_now = states('weather.openweathermap') %}
            {% if states('sun.sun') == 'below_horizon' %}
                {% if cond_now == 'sunny' %} night {% elif cond_now == 'partlycloudy' %} night-partly-cloudy {% else %} {{ cond_now }} {% endif %}
            {% else %}
                {{ cond_now }}
            {% endif %}
          weather_condition_0: >
            {% set cond0 = state_attr('weather.openweathermap', 'forecast')[0].condition %}
            {% set next_setting = as_timestamp(state_attr('sun.sun', 'next_setting')) %}
            {% set next_rising = as_timestamp(state_attr('sun.sun', 'next_rising')) %}
            {% set cond0_time = as_timestamp(state_attr('weather.openweathermap', 'forecast')[0].datetime) %}
            {% if cond0_time < next_rising and next_rising < next_setting %}
                {% if cond0 == 'sunny' %} night {% elif cond0 == 'partlycloudy' %} night-partly-cloudy {% else %} {{ cond0 }} {% endif %}
            {% else %}
                {{ cond0 }}
            {% endif %}
          weather_temperature_0: >
            {{ state_attr('weather.openweathermap', 'forecast')[0].temperature | round }}
          weather_timestamp_0: >
            {{ as_timestamp(state_attr('weather.openweathermap', 'forecast')[0].datetime) | timestamp_custom('%H:%M') }}
          weather_condition_1: >
            {% set cond1 = state_attr('weather.openweathermap', 'forecast')[1].condition %}
            {% set next_setting = as_timestamp(state_attr('sun.sun', 'next_setting')) %}
            {% set next_rising = as_timestamp(state_attr('sun.sun', 'next_rising')) %}
            {% set cond1_time = as_timestamp(state_attr('weather.openweathermap', 'forecast')[1].datetime) %}
            {% if cond1_time < next_rising and next_rising < next_setting %}
                {% if cond1 == 'sunny' %} night {% elif cond1 == 'partlycloudy' %} night-partly-cloudy {% else %} {{ cond1 }} {% endif %}
            {% else %}
                {{ cond1 }}
            {% endif %}
          weather_temperature_1: >
            {{ state_attr('weather.openweathermap', 'forecast')[1].temperature | round }}
          weather_timestamp_1: >
            {{ as_timestamp(state_attr('weather.openweathermap', 'forecast')[1].datetime) | timestamp_custom('%H:%M') }}
          weather_condition_2: >
            {% set cond2 = state_attr('weather.openweathermap', 'forecast')[2].condition %}
            {% set next_setting = as_timestamp(state_attr('sun.sun', 'next_setting')) %}
            {% set next_rising = as_timestamp(state_attr('sun.sun', 'next_rising')) %}
            {% set cond2_time = as_timestamp(state_attr('weather.openweathermap', 'forecast')[2].datetime) %}
            {% if cond2_time < next_rising and next_rising < next_setting %}
                {% if cond2 == 'sunny' %} night {% elif cond2 == 'partlycloudy' %} night-partly-cloudy {% else %} {{ cond2 }} {% endif %}
            {% else %}
                {{ cond2 }}
            {% endif %}
          weather_temperature_2: >
            {{ state_attr('weather.openweathermap', 'forecast')[2].temperature | round }}
          weather_timestamp_2: >
            {{ as_timestamp(state_attr('weather.openweathermap', 'forecast')[2].datetime) | timestamp_custom('%H:%M') }}
          weather_condition_3: >
            {% set cond3 = state_attr('weather.openweathermap', 'forecast')[3].condition %}
            {% set next_setting = as_timestamp(state_attr('sun.sun', 'next_setting')) %}
            {% set next_rising = as_timestamp(state_attr('sun.sun', 'next_rising')) %}
            {% set cond3_time = as_timestamp(state_attr('weather.openweathermap', 'forecast')[3].datetime) %}
            {% if cond3_time < next_rising and next_rising < next_setting %}
                {% if cond3 == 'sunny' %} night {% elif cond3 == 'partlycloudy' %} night-partly-cloudy {% else %} {{ cond3 }} {% endif %}
            {% else %}
                {{ cond3 }}
            {% endif %}
          weather_temperature_3: >
            {{ state_attr('weather.openweathermap', 'forecast')[3].temperature | round }}
          weather_timestamp_3: >
            {{ as_timestamp(state_attr('weather.openweathermap', 'forecast')[3].datetime) | timestamp_custom('%H:%M') }}

